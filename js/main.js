// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π
document.addEventListener('DOMContentLoaded', function() {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
    let cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const cartCount = document.querySelector('.cart-count');
    const cartButton = document.querySelector('.btn-cart');

    // –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ä–∑–∏–Ω—ã
    const cartModal = document.createElement('div');
    cartModal.className = 'modal';
    cartModal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h2>–ö–æ—Ä–∑–∏–Ω–∞</h2>
                <button class="close-modal">&times;</button>
            </div>
            <div class="cart-items"></div>
            <div class="cart-footer">
                <div class="cart-total">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span class="total-amount">0 ‚ÇΩ</span>
                </div>
                <div class="promo-row">
                    <input type="text" class="promo-input" placeholder="–ü—Ä–æ–º–æ–∫–æ–¥">
                    <button class="apply-promo btn">–ü—Ä–∏–º–µ–Ω–∏—Ç—å</button>
                    <span class="promo-message" style="margin-left:10px;color:#00eaff;"></span>
                </div>
                <button class="btn btn-primary cart-checkout">–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</button>
            </div>
        </div>
    `;
    document.body.appendChild(cartModal);

    let promo = { code: '', discount: 0 };
    const PROMO_CODES = { 'SALE5000': 5000, 'NEON2025': 2025 };

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª—ë—Ç–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    document.body.addEventListener('click', function(e) {
        const btn = e.target.closest('.add-to-cart');
        if (btn) {
            // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
            const name = btn.getAttribute('data-name');
            const price = parseInt(btn.getAttribute('data-price'));
            cart.push({ name, price });
            saveCart();
            updateCart();
            showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–ª—ë—Ç–∞
            const productCard = btn.closest('.product-card');
            const productImg = productCard?.querySelector('.product-image img');
            const cartIcon = document.querySelector('.btn-cart');
            if (productImg && cartIcon) {
                const imgRect = productImg.getBoundingClientRect();
                const cartRect = cartIcon.getBoundingClientRect();
                const clone = productImg.cloneNode(true);
                clone.style.position = 'fixed';
                clone.style.left = imgRect.left + 'px';
                clone.style.top = imgRect.top + 'px';
                clone.style.width = imgRect.width + 'px';
                clone.style.height = imgRect.height + 'px';
                clone.style.zIndex = 9999;
                clone.style.transition = 'all 0.8s cubic-bezier(.6,-0.28,.74,.05)';
                document.body.appendChild(clone);
                setTimeout(() => {
                    clone.style.left = cartRect.left + cartRect.width/2 - imgRect.width/4 + 'px';
                    clone.style.top = cartRect.top + cartRect.height/2 - imgRect.height/4 + 'px';
                    clone.style.width = imgRect.width/2 + 'px';
                    clone.style.height = imgRect.height/2 + 'px';
                    clone.style.opacity = '0.5';
                }, 10);
                setTimeout(() => {
                    clone.remove();
                }, 850);
            }
        }
    });

    // –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    if (cartButton) {
        cartButton.addEventListener('click', function(e) {
            e.preventDefault();
            cartModal.style.display = 'block';
            updateCart();
        });
    }

    // –ó–∞–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    const closeCartBtn = cartModal.querySelector('.close-modal');
    if (closeCartBtn) {
        closeCartBtn.addEventListener('click', function() {
        cartModal.style.display = 'none';
    });
    }
    window.addEventListener('click', function(e) {
        if (e.target === cartModal) cartModal.style.display = 'none';
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    cartModal.addEventListener('click', function(e) {
        if (e.target.closest && e.target.closest('.cart-item-remove')) {
            const index = e.target.closest('.cart-item-remove').dataset.index;
            const itemName = cart[index]?.name || '—Ç–æ–≤–∞—Ä';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã? ${itemName} –ø–ª–∞–∫–∞–ª, –∫–æ–≥–¥–∞ –µ–≥–æ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üò¢`)) {
                cart.splice(index, 1);
                saveCart();
                updateCart();
                showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!');
            }
        }
    });

    // –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
    const checkoutBtn = cartModal.querySelector('.cart-checkout');
    if (checkoutBtn) {
        checkoutBtn.addEventListener('click', function() {
        if (cart.length === 0) {
            showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
            return;
        }
        window.location.href = 'checkout.html';
    });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å—á–µ—Ç—á–∏–∫–∞
    function updateCart() {
        const cartItems = cartModal.querySelector('.cart-items');
        const totalAmount = cartModal.querySelector('.total-amount');
        const promoMessage = cartModal.querySelector('.promo-message');
        let total = 0;
        cartItems.innerHTML = '';
        cart.forEach((item, index) => {
            total += item.price * (item.qty || 1);
            cartItems.innerHTML += `
                <div class="cart-item">
                    <div class="cart-item-info">
                        <h3 class="cart-item-title">${item.name}</h3>
                        <div class="cart-item-qty">
                            <button class="qty-minus" data-index="${index}">-</button>
                            <input type="number" min="1" value="${item.qty || 1}" data-index="${index}" class="qty-input">
                            <button class="qty-plus" data-index="${index}">+</button>
                        </div>
                        <p class="cart-item-price">${item.price} ‚ÇΩ</p>
                    </div>
                    <button class="cart-item-remove" data-index="${index}">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            `;
        });
        let discount = promo.discount && total > 0 ? Math.min(promo.discount, total) : 0;
        let finalTotal = total - discount;
        totalAmount.textContent = `${finalTotal} ‚ÇΩ`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        if (promo.code && discount > 0) {
            promoMessage.textContent = `–ü—Ä–æ–º–æ–∫–æ–¥ ${promo.code} –ø—Ä–∏–º–µ–Ω—ë–Ω: -${discount} ‚ÇΩ`;
            promoMessage.style.color = '#00eaff';
        } else if (promo.code && discount === 0) {
            promoMessage.textContent = '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
            promoMessage.style.color = '#e74c3c';
        } else {
            promoMessage.textContent = '';
        }
        if (cartCount) cartCount.textContent = cart.reduce((sum, i) => sum + (i.qty || 1), 0);
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ localStorage
    function saveCart() {
        localStorage.setItem('cart', JSON.stringify(cart));
    }

    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏ —Å—á–µ—Ç—á–∏–∫
    updateCart();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    if (!localStorage.getItem('cart')) {
        localStorage.setItem('cart', JSON.stringify([]));
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    updateCartCount();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    var cartBtnEl = document.getElementById('cartButton');
    if (cartBtnEl) {
        cartBtnEl.addEventListener('click', function() {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            if (localStorage.getItem('cancelledOrders') >= 2) {
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É?')) {
                    window.location.href = '/cart';
                }
            } else {
                window.location.href = '/cart';
            }
        });
    }
    
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ ---
    const searchModal = document.createElement('div');
    searchModal.className = 'modal';
    searchModal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h2>–ü–æ–∏—Å–∫</h2>
                <button class="close-modal">&times;</button>
            </div>
            <div class="search-form-modal">
                <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..." class="modal-search-input">
                <button class="btn btn-primary modal-search-btn">–ù–∞–π—Ç–∏</button>
            </div>
            <div class="search-results"></div>
        </div>
    `;
    document.body.appendChild(searchModal);

    const searchButton = document.querySelector('.btn-search');
    const modalInput = searchModal.querySelector('.modal-search-input');
    const modalBtn = searchModal.querySelector('.modal-search-btn');
    const searchResults = searchModal.querySelector('.search-results');

    if (searchButton) {
    searchButton.addEventListener('click', (e) => {
        e.preventDefault();
        searchModal.style.display = 'block';
        modalInput.value = '';
        searchResults.innerHTML = '';
        modalInput.focus();
    });
    }
    if (searchModal.querySelector('.close-modal')) {
    searchModal.querySelector('.close-modal').addEventListener('click', () => {
        searchModal.style.display = 'none';
    });
    }
    window.addEventListener('click', (e) => {
        if (e.target === searchModal) searchModal.style.display = 'none';
    });
    if (modalInput) modalInput.addEventListener('input', doModalSearch);
    if (modalBtn) modalBtn.addEventListener('click', doModalSearch);

    function doModalSearch() {
        const query = modalInput.value.trim().toLowerCase();
        searchResults.innerHTML = '';
        if (!query) return;
        const products = Array.from(document.querySelectorAll('.product-card'));
        let found = 0;
        // –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å '–¥–µ—à–µ–≤', –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ premium
        const isCheap = query.includes('–¥–µ—à–µ–≤');
        products.forEach(product => {
            const nameElem = product.querySelector('h3');
            const name = nameElem ? nameElem.textContent.toLowerCase() : '';
            const descElem = product.querySelector('.product-description');
            const description = descElem ? descElem.textContent.toLowerCase() : '';
            const isPremium = product.dataset.premium === 'true';
            // –ü–æ–∏—Å–∫ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏: –∏—â–µ–º –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é —Ö–æ—Ç—è –±—ã 3 –±—É–∫–≤ –ø–æ–¥—Ä—è–¥
            let match = false;
            if (query.length >= 3) {
                for (let i = 0; i < query.length - 2; i++) {
                    const part = query.slice(i, i+3);
                    if (name.includes(part) || description.includes(part)) match = true;
                }
            } else {
                match = name.includes(query) || description.includes(query);
            }
            if (match && (!isCheap || isPremium)) {
                const clone = product.cloneNode(true);
                searchResults.appendChild(clone);
                found++;
            }
        });
        if (found === 0) {
            searchResults.innerHTML = '<div style="padding:20px; color:#888;">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>';
        }
    }

    // –ü–æ–∏—Å–∫ –ø–æ submit —Ñ–æ—Ä–º—ã, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    const searchInput = document.querySelector('.search-input');
    const searchForm = document.querySelector('.search-form');
    if (searchInput && searchForm) {
        searchForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const query = searchInput.value.trim().toLowerCase();
            const products = Array.from(document.querySelectorAll('.product-card'));
            let found = 0;
            products.forEach(product => {
                const nameElem = product.querySelector('h3');
                const name = nameElem ? nameElem.textContent.toLowerCase() : '';
                const descElem = product.querySelector('.product-description');
                const description = descElem ? descElem.textContent.toLowerCase() : '';
                if (name.includes(query) || description.includes(query)) {
                    product.style.display = '';
                    found++;
                } else {
                    product.style.display = 'none';
                }
            });
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            // if (found === 0) alert('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        });
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    cartModal.addEventListener('click', function(e) {
        if (e.target.classList.contains('qty-plus')) {
            const idx = +e.target.dataset.index;
            cart[idx].qty = (cart[idx].qty || 1) + 1;
            saveCart();
            updateCart();
        }
        if (e.target.classList.contains('qty-minus')) {
            const idx = +e.target.dataset.index;
            cart[idx].qty = Math.max(1, (cart[idx].qty || 1) - 1);
            saveCart();
            updateCart();
        }
    });
    cartModal.addEventListener('input', function(e) {
        if (e.target.classList.contains('qty-input')) {
            const idx = +e.target.dataset.index;
            let val = Math.max(1, parseInt(e.target.value) || 1);
            cart[idx].qty = val;
            saveCart();
            updateCart();
        }
    });
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    const applyPromoBtn = cartModal.querySelector('.apply-promo');
    if (applyPromoBtn) {
        applyPromoBtn.addEventListener('click', function() {
            const promoInput = cartModal.querySelector('.promo-input');
            const val = promoInput ? promoInput.value.trim().toUpperCase() : '';
        if (PROMO_CODES[val]) {
            promo = { code: val, discount: PROMO_CODES[val] };
        } else {
            promo = { code: val, discount: 0 };
        }
        updateCart();
    });
    }

    // --- –ö–Ω–æ–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
    const accountBtn = document.querySelector('.btn-account');
    const authModal = document.getElementById('authModal');
    if (accountBtn && authModal) {
        accountBtn.addEventListener('click', function(e) {
            e.preventDefault();
            authModal.style.display = 'flex';
        });
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫—Ä–µ—Å—Ç–∏–∫—É
        let closeBtn = authModal.querySelector('.close-modal');
        if (!closeBtn) {
            closeBtn = document.createElement('button');
            closeBtn.className = 'close-modal';
            closeBtn.innerHTML = '&times;';
            closeBtn.style.position = 'absolute';
            closeBtn.style.top = '18px';
            closeBtn.style.right = '18px';
            closeBtn.style.fontSize = '2rem';
            closeBtn.style.background = 'none';
            closeBtn.style.border = 'none';
            closeBtn.style.color = '#00eaff';
            closeBtn.style.cursor = 'pointer';
            closeBtn.style.zIndex = '1001';
            if (authModal.firstElementChild) {
            authModal.firstElementChild.appendChild(closeBtn);
            }
        }
        if (closeBtn) {
        closeBtn.addEventListener('click', function() {
            authModal.style.display = 'none';
        });
        }
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–∫–Ω–∞
        authModal.addEventListener('mousedown', function(e) {
            if (e.target === authModal) authModal.style.display = 'none';
        });
    }
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const showRegister = document.getElementById('showRegister');
    const showLogin = document.getElementById('showLogin');
    const loginForm = document.getElementById('loginForm');
    const registerForm = document.getElementById('registerForm');
    if (showRegister && showLogin && loginForm && registerForm) {
        showRegister.addEventListener('click', function(e) {
            e.preventDefault();
            loginForm.style.display = 'none';
            registerForm.style.display = 'block';
        });
        showLogin.addEventListener('click', function(e) {
            e.preventDefault();
            registerForm.style.display = 'none';
            loginForm.style.display = 'block';
        });
    }

    // --- –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ---
    function setCurrentUser(user) {
        localStorage.setItem('currentUser', JSON.stringify(user));
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let users = JSON.parse(localStorage.getItem('users') || '[]');
        const existingUserIndex = users.findIndex(u => u.email === user.email);
        if (existingUserIndex > -1) {
            users[existingUserIndex] = user;
        } else {
            users.push(user);
        }
        localStorage.setItem('users', JSON.stringify(users));
    }

    function getCurrentUser() {
        return JSON.parse(localStorage.getItem('currentUser') || 'null');
    }

    function logoutUser() {
        localStorage.removeItem('currentUser');
        location.reload();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if (loginForm && registerForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value.trim();
            const pass = document.getElementById('loginPass').value;
            
            // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
            let users = JSON.parse(localStorage.getItem('users') || '[]');
            let user = users.find(u => u.email === email && u.pass === pass);
            
            if (user) {
                setCurrentUser(user);
                authModal.style.display = 'none';
                updateAccountBtn();
            } else {
                alert('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }
        });

        registerForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const name = document.getElementById('regName').value.trim();
            const email = document.getElementById('regEmail').value.trim();
            const pass = document.getElementById('regPass').value;
            
            if (!name || !email || !pass) {
                return alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
            let users = JSON.parse(localStorage.getItem('users') || '[]');
            if (users.some(u => u.email === email)) {
                return alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            let user = {name, email, pass, orders: [], wishlist: []};
            setCurrentUser(user);
            authModal.style.display = 'none';
            updateAccountBtn();
        });
    }
    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
    function updateAccountBtn() {
        const user = getCurrentUser();
        if (user && accountBtn) {
            accountBtn.innerHTML = `<span style='color:#00eaff;font-weight:600;'>${user.name}</span>`;
            accountBtn.title = '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç';
            accountBtn.onclick = function(e) {
                e.preventDefault();
                window.location.href = 'account.html';
            };
        } else if (accountBtn) {
            accountBtn.innerHTML = '<i class="fas fa-user"></i>';
            accountBtn.title = '–í–æ–π—Ç–∏';
            accountBtn.onclick = null;
        }
    }
    updateAccountBtn();

    // --- –õ–æ–≥–∏–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ---
    function updateWishlistButtons() {
        const currentUser = getCurrentUser();
        if (!currentUser || !currentUser.wishlist) {
            return;
        }

        document.querySelectorAll('.btn-wishlist').forEach(button => {
            const productName = button.dataset.name;
            const isInWishlist = currentUser.wishlist.some(item => item.name === productName);
            if (isInWishlist) {
                button.classList.add('active');
                button.innerHTML = '&#10084; –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
            } else {
                button.classList.remove('active');
                button.innerHTML = '‚ô° –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            }
        });
    }

    // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    document.body.addEventListener('click', function(event) {
        const button = event.target.closest('.btn-wishlist');
        if (!button) {
            return; // –ö–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ
        }
        
        const currentUser = getCurrentUser();
        if (!currentUser) {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.');
            return;
        }

        const product = {
            name: button.dataset.name,
            price: button.dataset.price,
            image: button.dataset.image
        };

        const wishlist = currentUser.wishlist || [];
        const productIndex = wishlist.findIndex(item => item.name === product.name);

        if (productIndex > -1) {
            // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –ø–ª–∞–∫–∞–ª, –∫–æ–≥–¥–∞ –µ–≥–æ –¥–æ–±–∞–≤–ª—è–ª–∏ üò¢')) {
                wishlist.splice(productIndex, 1);
                showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
            } else {
                return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
            }
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
            wishlist.push(product);
            showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
        }

        currentUser.wishlist = wishlist;
        setCurrentUser(currentUser);
        updateWishlistButtons();
    });

    updateWishlistButtons();

});

function updateCartCount() {
    try {
        const cart = JSON.parse(localStorage.getItem('cart') || '[]');
        const cartCountEl = document.getElementById('cartCount');
        if(cartCountEl) {
            cartCountEl.textContent = cart.reduce((sum, item) => sum + (item.qty || 1), 0);
        }
    } catch (e) {
        console.error("Could not update cart count:", e);
    }
}

function searchWithTypos(query) {
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Fuse.js
}

function filterPremiumProducts() {
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä–æ–≤
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–µ—à–µ–º –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏–∏ "–ß–µ—Ä–Ω–∞—è –ø—è—Ç–Ω–∏—Ü–∞"
function checkBlackFridayProducts() {
    const products = document.querySelectorAll('.product-card');
    
    products.forEach(product => {
        if (product.dataset.isBlackFriday === 'true') {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π TTL –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏–∏
            product.style.setProperty('--cache-ttl', '5m');
        }
    });
}

// A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º
function runABTest(variation) {
    const originalConversion = getCurrentConversionRate();
    implementVariation(variation);
    
    const checkInterval = setInterval(() => {
        const newConversion = getCurrentConversionRate();
        if (newConversion < 0.005) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç
            revertVariation(variation);
            clearInterval(checkInterval);
        }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–∏—Å–µ–º –æ –±—Ä–æ—à–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ
function trackCartAbandonment() {
    localStorage.setItem('cartAbandonTime', Date.now());
    
    document.querySelector('.similar-products').addEventListener('click', function() {
        localStorage.setItem('viewedSimilarProducts', Date.now());
    });
    
    setInterval(checkAbandonedCart, 60000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

function checkAbandonedCart() {
    const cartAbandonTime = localStorage.getItem('cartAbandonTime');
    const viewedSimilar = localStorage.getItem('viewedSimilarProducts');
    
    let delay = 3600000; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (viewedSimilar) {
        delay = 86400000; // 24 —á–∞—Å–∞ –µ—Å–ª–∏ —Å–º–æ—Ç—Ä–µ–ª –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
    }
    
    if (cartAbandonTime && (Date.now() - cartAbandonTime > delay)) {
        sendReminderEmail();
        localStorage.removeItem('cartAbandonTime');
    }
}

// Newsletter form
const newsletterForm = document.querySelector('.subscribe-form');
if (newsletterForm) {
    newsletterForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const emailInput = e.target.querySelector('input[type="email"]');
        const email = emailInput.value;
        
        if(email) {
        // Show success message
        showNotification('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!');
        // Reset form
            emailInput.value = '';
        } else {
            showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email');
        }
    });
}

// Notification system
function showNotification(message) {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => notification.classList.add('show'), 100);
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
    }, 2000);
}

// Smooth scroll for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', (e) => {
        e.preventDefault();
        const target = document.querySelector(anchor.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }
    });
});

// Add hover effect to product cards
document.querySelectorAll('.product-card').forEach(card => {
    card.addEventListener('mouseenter', () => {
        card.style.transform = 'translateY(-5px)';
    });
    
    card.addEventListener('mouseleave', () => {
        card.style.transform = 'translateY(0)';
    });
});

// Add loading animation to buttons
document.querySelectorAll('.btn').forEach(button => {
    button.addEventListener('click', () => {
        button.classList.add('btn-loading');
        setTimeout(() => {
            button.classList.remove('btn-loading');
        }, 1000);
    });
});

function translit(str) {
    const ru = ['–∞','–±','–≤','–≥','–¥','–µ','—ë','–∂','–∑','–∏','–π','–∫','–ª','–º','–Ω','–æ','–ø','—Ä','—Å','—Ç','—É','—Ñ','—Ö','—Ü','—á','—à','—â','—ä','—ã','—å','—ç','—é','—è'];
    const en = ['a','b','v','g','d','e','e','zh','z','i','y','k','l','m','n','o','p','r','s','t','u','f','h','ts','ch','sh','sch','','y','','e','yu','ya'];
    return str.split('').map(s => {
        const i = ru.indexOf(s);
        if (i >= 0) return en[i];
        return s;
    }).join('');
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å querySelector('#')
// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ –ø—É—Å—Ç–æ–π –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º querySelector
const allLinks = document.querySelectorAll('a');
allLinks.forEach(link => {
    if (link.getAttribute('href') === '#') {
        link.addEventListener('click', function(e) {
            e.preventDefault();
        });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
function addToWishlist(product) {
    if (!isLoggedIn()) {
        showNotification('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É');
        return;
    }
    let user = getCurrentUser();
    if (!user.wishlist) user.wishlist = [];

    // ... existing code ...
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
}

// --- Hover –ø–æ —É–≥–ª—É –¥–ª—è feature-card ---
document.querySelectorAll('.feature-card').forEach(card => {
  card.addEventListener('mousemove', function(e) {
    const rect = card.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    const dx = e.clientX - centerX;
    const dy = centerY - e.clientY; // y –≤–Ω–∏–∑ ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ
    const angle = Math.atan2(dy, dx) * 180 / Math.PI; // –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
    const normAngle = (angle + 360) % 360;
    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≥–æ–ª –±–ª–∏–∑–æ–∫ –∫ 45¬∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ—Å–∏ X)
    if (normAngle > 40 && normAngle < 50) {
      card.classList.add('custom-hover');
    } else {
      card.classList.remove('custom-hover');
    }
  });
  card.addEventListener('mouseleave', function() {
    card.classList.remove('custom-hover');
  });
});